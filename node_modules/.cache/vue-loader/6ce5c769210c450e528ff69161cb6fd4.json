{"remainingRequest":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\src\\components\\SpatialAnalysis\\SpatialAnalysisDialog.vue?vue&type=style&index=0&id=9f82780e&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\src\\components\\SpatialAnalysis\\SpatialAnalysisDialog.vue","mtime":1656476912657},{"path":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\20606\\Desktop\\课程\\三维GIS原理与应用\\smartSchool\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc3BhdGlhbEFuYWx5c2lzRGlhbG9nIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGxlZnQ6IDE1JTsKICAgIHRvcDogMjAlOwogICAgd2lkdGg6IDMwMHB4Owp9CgouYmxvY2sgewogICAgd2lkdGg6IDEwMCU7CiAgICBtYXJnaW46IDAgYXV0bzsKfQoKLnJvdyB7CiAgICBoZWlnaHQ6IDUwcHg7CiAgICB3aWR0aDogMTAwJTsKICAgIG1hcmdpbjogYXV0bzsKfQoKLnJvdyAqIHsKICAgIG1hcmdpbjogYXV0bzsKICAgIGZvbnQtc2l6ZTogMTVweDsKfQoKLnRpdGxlIHsKICAgIG1hcmdpbjogYXV0byAxMHB4Owp9Cg=="},{"version":3,"sources":["SpatialAnalysisDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAocA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"SpatialAnalysisDialog.vue","sourceRoot":"src/components/SpatialAnalysis","sourcesContent":["<template>\r\n    <div class=\"spatialAnalysisDialog\">\r\n        <v-card class=\"block\" v-show=\"options.buffer\">\r\n            <div class=\"row\">\r\n                <v-text-field\r\n                        label=\"设置缓冲区半径（m）\"\r\n                        v-model=\"buffer.radius\"\r\n                        hide-details=\"auto\"\r\n                        class=\"title\"\r\n                >\r\n\r\n                </v-text-field>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"buffer.option=1;setBuffer()\"\r\n                >\r\n                    点\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"buffer.option=2;setBuffer()\"\r\n                >\r\n                    线\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"buffer.option=3;setBuffer()\"\r\n                >\r\n                    面\r\n                </v-btn>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"buffer.option=0;setBuffer()\"\r\n                >\r\n                    清空\r\n                </v-btn>\r\n            </div>\r\n        </v-card>\r\n        <v-card class=\"block\" v-show=\"options.visibility\">\r\n            <div class=\"row\">\r\n                <span>视域方向</span>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-slider class=\"title\" v-model=\"visibility.form.viewHeading\" :max=\"360\" :min=\"0\"></v-slider>\r\n            </div>\r\n            <div class=\"row\">\r\n                <span>水平张角</span>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-slider class=\"title\" v-model=\"visibility.form.horizontalViewAngle\" :max=\"150\" :min=\"1\"></v-slider>\r\n            </div>\r\n            <div class=\"row\">\r\n                <span>垂直张角</span>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-slider class=\"title\" v-model=\"visibility.form.verticalViewAngle\" :max=\"150\" :min=\"1\"></v-slider>\r\n            </div>\r\n            <div class=\"row\">\r\n                <span>视域距离</span>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-slider class=\"title\" v-model=\"visibility.form.viewDistance\" :max=\"1000\" :min=\"1\"></v-slider>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"visibility.flag=true;setVisibility()\"\r\n                >\r\n                    绘制\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"visibility.flag=false;setVisibility()\"\r\n                >\r\n                    清空\r\n                </v-btn>\r\n            </div>\r\n        </v-card>\r\n        <v-card class=\"block\" v-show=\"options.limitHeight\">\r\n            <div class=\"row\">\r\n                <span>限制高度</span>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-slider class=\"title\" v-model=\"limitHeight.limit\" :max=\"120\" :min=\"1\"></v-slider>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"limitHeight.flag=true;setLimitHeight()\"\r\n                >\r\n                    绘制\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"limitHeight.flag=false;setLimitHeight()\"\r\n                >\r\n                    清空\r\n                </v-btn>\r\n            </div>\r\n        </v-card>\r\n        <v-card class=\"block\" v-show=\"options.sight\">\r\n            <div class=\"row\">\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"sight.option=1;setSight()\"\r\n                >\r\n                    线形\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"sight.option=2;setSight()\"\r\n                >\r\n                    圆形\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"sight.option=0;setSight()\"\r\n                >\r\n                    清空\r\n                </v-btn>\r\n            </div>\r\n        </v-card>\r\n        <v-card class=\"block\" v-show=\"options.digTerrain\">\r\n            <div class=\"row\">\r\n                <v-text-field\r\n                        label=\"设置填挖深度（m）\"\r\n                        v-model=\"digTerrain.depth\"\r\n                        hide-details=\"auto\"\r\n                        class=\"title\"\r\n                >\r\n\r\n                </v-text-field>\r\n            </div>\r\n            <div class=\"row\">\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"digTerrain.flag=true;setDigTerrain()\"\r\n                >\r\n                    绘制\r\n                </v-btn>\r\n                <v-btn\r\n                        color=\"primary\"\r\n                        elevation=\"2\"\r\n                        @click=\"digTerrain.flag=false;setDigTerrain()\"\r\n                >\r\n                    清空\r\n                </v-btn>\r\n            </div>\r\n        </v-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    const Cesium = require(\"../../../node_modules/cesium/Source/Cesium.js\");\r\n\r\n    import { mapState } from 'vuex'\r\n    import SpatialAnalysis from '../../utils/spatialAnalysis'\r\n    export default {\r\n        name: \"SpatialAnalysisDialog\",\r\n        data() {\r\n            return {\r\n                buffer: {\r\n                    radius: 10,\r\n                    option: 0\r\n                },\r\n                visibility: {\r\n                    entity: null,\r\n                    flag: false,\r\n                    field: null,\r\n                    form: {\r\n                        viewHeading: 0,\r\n                        viewDistance: 0,\r\n                        horizontalViewAngle: 0,\r\n                        verticalViewAngle: 0\r\n                    }\r\n                },\r\n                limitHeight: {\r\n                    entity: null,\r\n                    flag: false,\r\n                    limit: 60,\r\n                },\r\n                sight: {\r\n                    singleLine: null,\r\n                    circle: null,\r\n                    option: 0\r\n                },\r\n                digTerrain: {\r\n                    entity: null,\r\n                    flag: false,\r\n                    depth: 200\r\n                }\r\n\r\n\r\n            };\r\n        },\r\n        watch: {\r\n            'visibility.form': {\r\n                deep: true,\r\n                handler() {\r\n                    if (this.visibility.field !== null)\r\n                    {\r\n                        this.visibility.field.updateStyle(this.visibility.form);\r\n                    }\r\n                }\r\n            },\r\n            'limitHeight.limit': {\r\n                deep: true,\r\n                handler() {\r\n                    if(this.limitHeight.entity !== null)\r\n                    {\r\n                        this.limitHeight.entity.setHeight(Number(this.limitHeight.limit));\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        computed: {\r\n            ...mapState(['viewer', 'handler', 'options'])\r\n        },\r\n        methods: {\r\n            getPositions(movement) {\r\n                let Cartesian3 = this.viewer.camera.pickEllipsoid(movement.endPosition || movement.position, Cesium.Ellipsoid.WGS84);\r\n                if (Cartesian3 == undefined) return\r\n                this.x = Number(Cartesian3.x).toFixed(2);\r\n                this.y = Number(Cartesian3.y).toFixed(2);\r\n                this.z = Number(Cartesian3.z).toFixed(2);\r\n                let Cartographic = Cesium.Cartographic.fromCartesian(Cartesian3);\r\n                this.lon = Cesium.Math.toDegrees(Cartographic.longitude);\r\n                this.lat = Cesium.Math.toDegrees(Cartographic.latitude);\r\n                this.height = Cartographic.height;\r\n                return [Cesium.Math.toDegrees(Cartographic.longitude), Cesium.Math.toDegrees(Cartographic.latitude)];\r\n            },\r\n            addBuffer(buffer) {\r\n                this.viewer.entities.add({\r\n                    polygon: {\r\n                        hierarchy: new Cesium.PolygonHierarchy(buffer),\r\n                        material: Cesium.Color.RED.withAlpha(0.6),\r\n                        classificationType: Cesium.ClassificationType.BOTH\r\n                    },\r\n                    polyline: {\r\n                        positions: buffer,\r\n                        width: 2,\r\n                        material: Cesium.Color.RED.withAlpha(0.4),\r\n                    }\r\n                });\r\n            },\r\n            setBuffer() {\r\n                if (this.buffer.option === 0) {\r\n                    this.viewer.entities.removeAll()\r\n                }\r\n                if (this.buffer.option === 1) {\r\n                    this.handler.setInputAction(clickEvent => {\r\n                        this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n                        let point = this.getPositions(clickEvent);\r\n                        this.viewer.entities.add({\r\n                            position: Cesium.Cartesian3.fromDegrees(point[0], point[1], 0),\r\n                            point: {\r\n                                pixelSize: 3,\r\n                                color: Cesium.Color.YELLOW,\r\n                                outlineWidth: 3,\r\n                                outlineColor: Cesium.Color.YELLOW.withAlpha(0.4),\r\n                            }\r\n                        });\r\n                        this.addBuffer(SpatialAnalysis.BufferAnalysis.pointBuffer(point, this.buffer.radius));\r\n                    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n                }\r\n                if (this.buffer.option === 2) {\r\n                    let points = [];\r\n                    this.handler.setInputAction(clickEvent => {\r\n                        points.push(this.getPositions(clickEvent))\r\n                        if (points.length > 1) {\r\n                            let positions = [...points[points.length - 2], ...points[points.length - 1]];\r\n                            this.viewer.entities.add({\r\n                                polyline: {\r\n                                    positions: Cesium.Cartesian3.fromDegreesArray(positions),\r\n                                    width: 2,\r\n                                    material: Cesium.Color.YELLOW,\r\n                                }\r\n                            })\r\n                        }\r\n                    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n                    this.handler.setInputAction(clickEvent => {\r\n                        this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n                        this.handler.removeInputAction(Cesium.ScreenSpaceEventType.RIGHT_CLICK);\r\n                        this.addBuffer(SpatialAnalysis.BufferAnalysis.polylineBuffer(points, this.buffer.radius));\r\n                    }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\r\n                }\r\n                if (this.buffer.option === 3) {\r\n                    let points = [];\r\n                    let positions = []\r\n                    this.handler.setInputAction(clickEvent => {\r\n\r\n                        points.push(this.getPositions(clickEvent))\r\n                        positions = [...positions, ...this.getPositions(clickEvent)];\r\n                        if (points.length > 1 && points.length < 3) {\r\n                            this.viewer.entities.add({\r\n                                id: 'area_line',\r\n                                polyline: {\r\n                                    positions: Cesium.Cartesian3.fromDegreesArray(positions),\r\n                                    width: 2,\r\n                                    material: Cesium.Color.YELLOW,\r\n                                }\r\n                            })\r\n                        } else if (points.length >= 3) {\r\n                            let areas = Cesium.Cartesian3.fromDegreesArray([...positions, positions[0], positions[1]]);\r\n                            this.viewer.entities.removeById('area');\r\n                            this.viewer.entities.add({\r\n                                id: 'area',\r\n                                polygon: {\r\n                                    hierarchy: new Cesium.PolygonHierarchy(areas),\r\n                                    material: Cesium.Color.YELLOW.withAlpha(0.6),\r\n                                    classificationType: Cesium.ClassificationType.BOTH\r\n                                },\r\n                                polyline: {\r\n                                    positions: areas,\r\n                                    width: 2,\r\n                                    material: Cesium.Color.YELLOW.withAlpha(0.4),\r\n                                }\r\n                            });\r\n                            this.viewer.entities.removeById('area_line');\r\n                        }\r\n                    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n                    this.handler.setInputAction(clickEvent => {\r\n                        this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n                        this.handler.removeInputAction(Cesium.ScreenSpaceEventType.RIGHT_CLICK);\r\n                        if (points.length >= 3) {\r\n                            let areas = Cesium.Cartesian3.fromDegreesArray([...positions, positions[0], positions[1]]);\r\n                            this.viewer.entities.removeById('area');\r\n                            this.viewer.entities.add({\r\n                                polygon: {\r\n                                    hierarchy: new Cesium.PolygonHierarchy(areas),\r\n                                    material: Cesium.Color.YELLOW.withAlpha(0.6),\r\n                                    classificationType: Cesium.ClassificationType.BOTH\r\n                                },\r\n                                polyline: {\r\n                                    positions: areas,\r\n                                    width: 2,\r\n                                    material: Cesium.Color.YELLOW.withAlpha(0.4),\r\n                                }\r\n                            });\r\n                            let area_points = [...points, points[0]]\r\n                            this.addBuffer(SpatialAnalysis.BufferAnalysis.polygonBuffer(area_points, this.buffer.radius));\r\n                        } else {\r\n                            this.viewer.entities.removeById('area_line');\r\n                        }\r\n                    }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\r\n                }\r\n            },\r\n            setVisibility() {\r\n                if(this.visibility.flag)\r\n                {\r\n                    this.visibility.entity = new SpatialAnalysis.VisibilityAnalysis(this.viewer);\r\n                    this.visibility.entity.DrawEndEvent.addEventListener(event => {\r\n                        this.visibility.field = event;\r\n                        this.visibility.form = event.getStyle();\r\n                    });\r\n                    this.visibility.entity.activate();\r\n                }\r\n                else\r\n                {\r\n                    if(this.visibility.field !== null)\r\n                    {\r\n                        this.visibility.field.remove();\r\n                        this.visibility.field = null;\r\n                    }\r\n                    this.visibility.entity = null;\r\n                }\r\n            },\r\n            setLimitHeight() {\r\n                if(this.limitHeight.flag)\r\n                {\r\n                    let degreesArray = [\r\n                        114.60898208096732, 30.464698423436272,\r\n                        114.61298208096732, 30.464698423436272,\r\n                        114.61298208096732, 30.460698423436272,\r\n                        114.60898208096732, 30.460698423436272,\r\n                    ];\r\n                    this.limitHeight.entity = new SpatialAnalysis.LimitHeightAnalysis(this.viewer, degreesArray, this.limitHeight.limit)\r\n                }\r\n                else\r\n                {\r\n                    this.limitHeight.entity.remove();\r\n                    this.limitHeight.entity = null;\r\n                }\r\n            },\r\n            setSight() {\r\n                if (this.sight.option === 0) {\r\n                    if(this.sight.singleLine !== null)\r\n                    {\r\n                        this.sight.singleLine.deactivate();\r\n                        this.sight.singleLine.clear();\r\n                    }\r\n                    if(this.sight.Circle !== null)\r\n                    {\r\n                        this.sight.Circle.deactivate();\r\n                        this.sight.Circle.clear();\r\n                    }\r\n                    this.viewer.entities.removeAll();\r\n                    this.viewer.scene.postProcessStages.removeAll();\r\n                }\r\n                if(this.sight.option === 1)\r\n                {\r\n                    this.sight.singleLine = new SpatialAnalysis.SightLine(this.viewer);\r\n                    this.sight.singleLine.activate();\r\n                }\r\n                if(this.sight.option === 2)\r\n                {\r\n                    this.sight.Circle = new SpatialAnalysis.Circle(this.viewer);\r\n                    this.sight.Circle.activate();\r\n                }\r\n            },\r\n            setDigTerrain() {\r\n                if(this.digTerrain.flag)\r\n                {\r\n                    this.digTerrain.entity = new SpatialAnalysis.Excavate(this.viewer)\r\n                    this.digTerrain.entity.clear()\r\n                    let entityDraw = new SpatialAnalysis.EntityDraw(this.viewer);\r\n                    entityDraw.DrawEndEvent.addEventListener((result, positions) => {\r\n                        result.remove()\r\n                        this.digTerrain.entity.add(positions, {\r\n                            excavateDepth: this.digTerrain.depth,\r\n                            bottomImage: 'img/excavate_bottom_min.jpg',\r\n                            sideImage: 'img/excavate_kuangqu.jpg'\r\n                        });\r\n                    })\r\n                    entityDraw.activate('Polygon');\r\n                }\r\n                else\r\n                {\r\n                    this.viewer.entities.removeAll();\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .spatialAnalysisDialog {\r\n        position: absolute;\r\n        left: 15%;\r\n        top: 20%;\r\n        width: 300px;\r\n    }\r\n\r\n    .block {\r\n        width: 100%;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .row {\r\n        height: 50px;\r\n        width: 100%;\r\n        margin: auto;\r\n    }\r\n\r\n    .row * {\r\n        margin: auto;\r\n        font-size: 15px;\r\n    }\r\n\r\n    .title {\r\n        margin: auto 10px;\r\n    }\r\n</style>"]}]}